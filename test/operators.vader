Given cs (order comparison at start of line):
  void f() {
    if (i
    < LongFunctionName())
  }

Execute:
  normal! 2jf<
  AssertEqual 'csOpSymbols', SyntaxAt()


Given cs (order comparison at end of line):
  void f() {
    if (i <
    LongFunctionName())
  }

Execute:
  normal! jf<
  AssertEqual 'csOpSymbols', SyntaxAt()


Given cs (order comparison with whitespace):
  void f() {
    if (7 < 8)
  }

Execute:
  normal! jf<
  AssertEqual 'csOpSymbols', SyntaxAt()


Given cs (order comparison missing whitespace):
  void f() {
    if (7<8)
  }

Execute:
  normal! jf<
  AssertEqual 'csOpSymbols', SyntaxAt()


Given cs (generic function):
  void f<int>() {
    return Get<int>();
  }

Execute:
  normal! f<
  AssertEqual 'csGenericBraces', SyntaxAt()
  normal! f>
  AssertEqual 'csGenericBraces', SyntaxAt()
  normal! j0f<
  AssertEqual 'csGenericBraces', SyntaxAt()
  normal! f>
  AssertEqual 'csGenericBraces', SyntaxAt()


Given cs (generic inside generic):
  Dictionary<string,List<Image>> f() {
    return 'a' <> null;
  }

Execute:
  normal! f<
  AssertEqual 'csGenericBraces', SyntaxAt()
  normal! f<
  AssertEqual 'csGenericBraces', SyntaxAt()
  normal! f>
  AssertEqual 'csGenericBraces', SyntaxAt()
  normal! f>
  AssertEqual 'csGenericBraces', SyntaxAt()

# Keyword operators

Given cs (typeof operator):
  typeof(Dictionary<string,List<Image>>)

Execute:
  AssertEqual 'csTypeOf',         SyntaxAt(1, 1)
  AssertEqual 'csParens',         SyntaxAt(1, 7)
  AssertEqual 'csTypeOfOperand',  SyntaxAt(1, 8)
  AssertEqual 'csParens',         SyntaxAt(1, 38)

Given cs (typeof operator with space before open paren):
  typeof (Dictionary<string,List<Image>>)

Execute:
  AssertEqual 'csTypeOf',         SyntaxAt(1, 1)
  AssertEqual 'csParens',         SyntaxAt(1, 8)
  AssertEqual 'csTypeOfOperand',  SyntaxAt(1, 9)
  AssertEqual 'csParens',         SyntaxAt(1, 39)

Given cs (typeof operator with missing operand parens):
  typeof Dictionary<string,List<Image>>

Execute:
  AssertEqual 'csTypeOf',         SyntaxAt(1, 1)
  AssertEqual 'csTypeOfError',    SyntaxAt(1, 8)

Given cs (await operator):
  await foobar();

Execute:
  AssertEqual 'csAsyncOperator', SyntaxAt(1, 1)

Given cs (checked operator):
  var foobar = checked(42 + 1);

Execute:
  AssertEqual 'csKeywordOperator', SyntaxOf('checked')

Given cs (unchecked operator):
  var foobar = unchecked(42 + 1);

Execute:
  AssertEqual 'csKeywordOperator', SyntaxOf('unchecked')

