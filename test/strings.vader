Given cs (a simple string):
  "a"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csString',                 SyntaxAt(2)
  AssertEqual 'csQuote',                  SyntaxAt(3)

Given cs (a simple string containing a single quote):
  "a'b"

Execute:
  AssertEqual 'csString',                 SyntaxAt(3)

Given cs (a string containing an escaped double quote):
  "a\"b"

Execute:
  AssertEqual 'csString',                 SyntaxAt(2)
  AssertEqual 'csSpecialChar',            SyntaxAt(3)
  AssertEqual 'csSpecialChar',            SyntaxAt(4)
  AssertEqual 'csString',                 SyntaxAt(5)

Given cs (a simple string containing {}):
  "a{b}c"

Execute:
  AssertEqual 'csString',                 SyntaxAt(2)
  AssertEqual 'csString',                 SyntaxAt(3), 'Do not highlight {} in simple string'
  AssertEqual 'csString',                 SyntaxAt(4)
  AssertEqual 'csString',                 SyntaxAt(5), 'Do not highlight {} in simple string'
  AssertEqual 'csString',                 SyntaxAt(6)

Given cs (a multiline string (illegal)):
  "a
   b"

Execute:
  AssertEqual    'csString',              SyntaxAt(1, 2)
  AssertNotEqual 'csString',              SyntaxAt(2, 2)
  AssertEqual    'csQuote',               SyntaxAt(2, 3)

Given cs (a simple verbatim (@) string):
  @"a"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csVerbatimString',         SyntaxAt(3)
  AssertEqual 'csQuote',                  SyntaxAt(4)

Given cs (a verbatim string containing ""):
  @"""a""b"""

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(3), 'Highlight double quotes ("")'
  AssertEqual 'csVerbatimQuote',          SyntaxAt(4)
  AssertEqual 'csVerbatimString',         SyntaxAt(5)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(6)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(7)
  AssertEqual 'csVerbatimString',         SyntaxAt(8)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(9)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(10)
  AssertEqual 'csQuote',                  SyntaxAt(11)

Given cs (a verbatim string containing \"):
  @"a\"b

Execute:
  AssertEqual    'csQuote',               SyntaxAt(1)
  AssertEqual    'csQuote',               SyntaxAt(2)
  AssertEqual    'csVerbatimString',      SyntaxAt(3)
  AssertEqual    'csVerbatimString',      SyntaxAt(4), 'Do not highlight \-escaped quotes'
  AssertEqual    'csQuote',               SyntaxAt(5)
  AssertNotEqual 'csString',              SyntaxAt(6)
  AssertNotEqual 'csQuote',               SyntaxAt(6)
  AssertNotEqual 'csVerbatimString',      SyntaxAt(6)

Given cs (a multiline verbatim string):
  @"a
    b"

Execute:
  AssertEqual 'csVerbatimString',         SyntaxAt(1, 3)
  AssertEqual 'csVerbatimString',         SyntaxAt(2, 3)

Given cs (an interpolated string with no interpolation):
  $"a"

Execute:
  AssertEqual 'csQuote',                  SyntaxAt(1)
  AssertEqual 'csQuote',                  SyntaxAt(2)
  AssertEqual 'csInterpolatedString',     SyntaxAt(3)
  AssertEqual 'csQuote',                  SyntaxAt(4)

Given cs (a simple interpolated string):
  $"a:{'a'}, n:{5}"

Execute:
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csCharacter',              SyntaxAt(7)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(9)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(14)
  AssertEqual 'csNumber',                 SyntaxAt(15)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(16)

Given cs (an interpolated string, containing strings):
  $"a:{"a\""} b:{@"b"""}, c{$"c{1}"}\""

Execute:
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csQuote',                  SyntaxAt(6)
  AssertEqual 'csString',                 SyntaxAt(7)
  AssertEqual 'csSpecialChar',            SyntaxAt(8)
  AssertEqual 'csSpecialChar',            SyntaxAt(9)
  AssertEqual 'csQuote',                  SyntaxAt(10)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(11)
  AssertEqual 'csInterpolatedString',     SyntaxAt(12)
  AssertEqual 'csInterpolatedString',     SyntaxAt(13)
  AssertEqual 'csInterpolatedString',     SyntaxAt(14)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(15)
  AssertEqual 'csQuote',                  SyntaxAt(16)
  AssertEqual 'csQuote',                  SyntaxAt(17)
  AssertEqual 'csVerbatimString',         SyntaxAt(18)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(19)
  AssertEqual 'csVerbatimQuote',          SyntaxAt(20)
  AssertEqual 'csQuote',                  SyntaxAt(21)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(22)
  AssertEqual 'csInterpolatedString',     SyntaxAt(23)
  AssertEqual 'csInterpolatedString',     SyntaxAt(24)
  AssertEqual 'csInterpolatedString',     SyntaxAt(25)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(26)
  AssertEqual 'csQuote',                  SyntaxAt(27)
  AssertEqual 'csQuote',                  SyntaxAt(28)
  AssertEqual 'csInterpolatedString',     SyntaxAt(29)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(30)
  AssertEqual 'csNumber',                 SyntaxAt(31)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(32)
  AssertEqual 'csQuote',                  SyntaxAt(33)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(34)
  AssertEqual 'csSpecialChar',            SyntaxAt(35)
  AssertEqual 'csSpecialChar',            SyntaxAt(36)
  AssertEqual 'csQuote',                  SyntaxAt(37)

Given cs (an interpolated string, containing an aligned string):
  $"a:{"a",5} b:{"b",-5}"

Execute (TODO):
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csQuote',                  SyntaxAt(6)
  AssertEqual 'csString',                 SyntaxAt(7)
  AssertEqual 'csQuote',                  SyntaxAt(8)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(9), 'TODO: alignment char'
  AssertEqual 'csInterpolationAlign',     SyntaxAt(10)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(11)
  AssertEqual 'csInterpolatedString',     SyntaxAt(12)
  AssertEqual 'csInterpolatedString',     SyntaxAt(13)
  AssertEqual 'csInterpolatedString',     SyntaxAt(14)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(15)
  AssertEqual 'csQuote',                  SyntaxAt(16)
  AssertEqual 'csString',                 SyntaxAt(17)
  AssertEqual 'csQuote',                  SyntaxAt(18)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(19), 'TODO: alignment char'
  AssertEqual 'csInterpolationAlign',     SyntaxAt(20)
  AssertEqual 'csInterpolationAlign',     SyntaxAt(21)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(22)
  AssertEqual 'csQuote',                  SyntaxAt(23)

Given cs (a string interpolated with formatted integers):
  $"a:{5:0} b:{5:F}"

Execute (TODO):
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csNumber',                 SyntaxAt(6)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(7)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(8)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(9)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(13)
  AssertEqual 'csNumber',                 SyntaxAt(14)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(15)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(16)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(17)

Given cs (a string interpolated with formatted floats):
  $"a:{.5:0.#} b:{.5:F}"

Execute (TODO):
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csNumber',                 SyntaxAt(6)
  AssertEqual 'csNumber',                 SyntaxAt(7)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(8)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(9)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(10)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(11)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(12)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(16)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(17)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(18)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(19)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(20)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(21)

Given cs (a strint interpolated with an aligned, formatted integer):
  $"a:{5,5:00}"

Execute (TODO):
  AssertEqual 'csInterpolatedString',     SyntaxAt(4)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(5)
  AssertEqual 'csNumber',                 SyntaxAt(6)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(7)
  AssertEqual 'csInterpolationAlign',     SyntaxAt(8)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(9)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(10)
  AssertEqual 'csInterpolationFormat',    SyntaxAt(11)
  AssertEqual 'csInterpolationDelimiter', SyntaxAt(12)

Given cs (a verbatim, interpolated string):
  $@"a:{'a'}""
    b"""

Execute (TODO):
  AssertEqual 'csQuote',                      SyntaxAt(1)
  AssertEqual 'csQuote',                      SyntaxAt(2)
  AssertEqual 'csQuote',                      SyntaxAt(3)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(4)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(5)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(6)
  AssertEqual 'csCharacter',                  SyntaxAt(7)
  AssertEqual 'csCharacter',                  SyntaxAt(8)
  AssertEqual 'csCharacter',                  SyntaxAt(9)
  AssertEqual 'csInterpolationDelimiter',     SyntaxAt(10)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(11)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(12)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(13)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(14)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(15)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(16)
  AssertEqual 'csVerbatimInterpolatedString', SyntaxAt(17)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(18)
  AssertEqual 'csVerbatimQuote',              SyntaxAt(19)
  AssertEqual 'csQuote',                      SyntaxAt(20)

Given cs (an incorrect prefix (@$ instead of $@)):
  @$""

Execute:
  AssertEqual 'csQuoteError',             SyntaxAt(1)
  AssertEqual 'csQuoteError',             SyntaxAt(2)
  AssertEqual 'csQuote',                  SyntaxAt(3)
  AssertEqual 'csQuote',                  SyntaxAt(4)
