Given cs (chars):
  'a'
  '\''

Execute:
  AssertEqual 'csCharacter',              SyntaxAt(1, 1)
  AssertEqual 'csCharacter',              SyntaxAt(1, 2)
  AssertEqual 'csCharacter',              SyntaxAt(1, 3)
  AssertEqual 'csCharacter',              SyntaxAt(2, 1)
  AssertEqual 'csSpecialChar',            SyntaxAt(2, 2)
  AssertEqual 'csSpecialChar',            SyntaxAt(2, 3)
  AssertEqual 'csCharacter',              SyntaxAt(2, 4)

Given cs (decimal literals):
  1234
  1234l

Execute:
  AssertEqual 'csNumber',                 SyntaxAt(1, 1)
  AssertEqual 'csNumber',                 SyntaxAt(2, 5)

Given cs (hex literal):
  0xf
  0xfl
  0xg

Execute:
  AssertEqual 'csNumber',                 SyntaxAt(1, 3)
  AssertEqual 'csNumber',                 SyntaxAt(2, 4)
  AssertNotEqual 'csNumber',              SyntaxAt(3, 3), 'Not a hex digit'

Given cs (binary literal):
  0b0
  0B0L
  0b2

Execute:
  AssertEqual 'csNumber',                 SyntaxAt(1, 3)
  AssertEqual 'csNumber',                 SyntaxAt(2, 4)
  AssertNotEqual 'csNumber',              SyntaxAt(3, 3), 'Not a binary digit'

Given cs (floating point literals):
  1.5f
  1e10d
  123.456D
  123.456M

Execute:
  AssertEqual 'csNumber',                 SyntaxAt(1, 4)
  AssertEqual 'csNumber',                 SyntaxAt(2, 5)
  AssertEqual 'csNumber',                 SyntaxAt(3, 8)
  AssertEqual 'csNumber',                 SyntaxAt(4, 8)

Given cs (digit separators):
  123_456
  0x_be_af
  0b_0011_0101
  123_456.242_3D

Execute:
  AssertEqual 'csNumber',                 SyntaxAt(1, 4)
  AssertEqual 'csNumber',                 SyntaxAt(2, 3)
  AssertEqual 'csNumber',                 SyntaxAt(3, 3)
  AssertEqual 'csNumber',                 SyntaxAt(4, 4)
  AssertEqual 'csNumber',                 SyntaxAt(4, 12)

Given cs (valid char literals):
  '\x1'
  '\x41'
  '\x041'
  '\x0041'
  '\u0041'
  '\U00000041'

Execute:
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(1, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(1, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(1, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(2, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(2, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(2, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(3, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(3, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(3, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(4, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(4, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(4, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(5, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(5, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(5, 4)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(6, 2)
  AssertEqual 'csUnicodeSpecifier',       SyntaxAt(6, 3)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(6, 4)
  AssertEqual 'csUnicodeNumber',          SyntaxAt(6, 11)

Given cs (invalid char literals):
  '\xaaaaa'
  '\uaaaaa'
  '\U00aaaaaaa'
  '\x'
  '\uaaa'
  '\U00aaaaa'
  '\xg'
  '\ugggg'
  '\Ugggggggg'

Execute:
  AssertEqual 'csSpecialCharError',       SyntaxAt(1, 8),  'More than 4 digits (\x)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(2, 8),  'More than 4 digits (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(3, 12), 'More than 8 digits (\U)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(4, 2),  'Less than 1 digit (\x)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(5, 2),  'Less than 4 digits (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(6, 2),  'Less than 8 digits (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(7, 4),  'Non-hex digit (\x)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(8, 4),  'Non-hex digit (\u)'
  AssertEqual 'csSpecialCharError',       SyntaxAt(9, 4),  'Non-hex digit (\U)'

